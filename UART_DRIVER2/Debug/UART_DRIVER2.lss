
UART_DRIVER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac7  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000459  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002db  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{
    uint16_t x;
	UART_Init();
  92:	0e 94 5a 00 	call	0xb4	; 0xb4 <UART_Init>
	SET_BIT(DDRA_R,0);
  96:	d0 9a       	sbi	0x1a, 0	; 26
	/*UART_ReceiveData_Test(&x);
	if(x=='M')
	{
		SET_BIT(PORTA_R,0);
	}*/
	UART_ReceiveString_Test(arr);
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
  9c:	ce 01       	movw	r24, r28
  9e:	0e 94 ac 00 	call	0x158	; 0x158 <UART_ReceiveString_Test>
	if(!strcmp(arr,"MOHAMED/r"))
  a2:	60 e6       	ldi	r22, 0x60	; 96
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 b0 00 	call	0x160	; 0x160 <strcmp>
  ac:	89 2b       	or	r24, r25
  ae:	09 f4       	brne	.+2      	; 0xb2 <main+0x20>
	{
		SET_BIT(PORTA_R,0);
  b0:	d8 9a       	sbi	0x1b, 0	; 27
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x20>

000000b4 <UART_Init>:
		{
			break;
		}		
	}
	return gError;
}
  b4:	10 bc       	out	0x20, r1	; 32
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	89 b9       	out	0x09, r24	; 9
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 bd       	out	0x20, r24	; 32
  c4:	80 b5       	in	r24, 0x20	; 32
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 bd       	out	0x20, r24	; 32
  ca:	80 b5       	in	r24, 0x20	; 32
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	80 bd       	out	0x20, r24	; 32
  d0:	80 b5       	in	r24, 0x20	; 32
  d2:	8f 7e       	andi	r24, 0xEF	; 239
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	80 b5       	in	r24, 0x20	; 32
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	80 bd       	out	0x20, r24	; 32
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  e2:	08 95       	ret

000000e4 <UART_ReceiveData>:
  e4:	fc 01       	movw	r30, r24
  e6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  ea:	88 23       	and	r24, r24
  ec:	59 f0       	breq	.+22     	; 0x104 <UART_ReceiveData+0x20>
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  f4:	5f 9b       	sbis	0x0b, 7	; 11
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <UART_ReceiveData+0x10>
  f8:	2c b1       	in	r18, 0x0c	; 12
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	31 83       	std	Z+1, r19	; 0x01
  fe:	20 83       	st	Z, r18
 100:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 104:	08 95       	ret

00000106 <UART_ReceiveString>:
* Parameters (out): pu8String
* Return Value    : enuErrorStatus_t - For error handling 
* Description     : Sending a string with UART
*************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String,uint8_t max_length)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
	if(gError==E_ERROR)
 110:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 114:	88 23       	and	r24, r24
 116:	d9 f0       	breq	.+54     	; 0x14e <UART_ReceiveString+0x48>
	{
		return E_ERROR;
	}
	gError=E_OK;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	uint8_t i=0;
	for(i=0;i<max_length;i++)
 11e:	66 23       	and	r22, r22
 120:	a1 f0       	breq	.+40     	; 0x14a <UART_ReceiveString+0x44>
 122:	c8 01       	movw	r24, r16
 124:	e8 01       	movw	r28, r16
 126:	61 50       	subi	r22, 0x01	; 1
 128:	06 2f       	mov	r16, r22
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	0f 5f       	subi	r16, 0xFF	; 255
 12e:	1f 4f       	sbci	r17, 0xFF	; 255
 130:	08 0f       	add	r16, r24
 132:	19 1f       	adc	r17, r25
	{
		UART_ReceiveData(&pu8String[i]);
 134:	ce 01       	movw	r24, r28
 136:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_ReceiveData>
		if((pu8String[i]=='\r')||(pu8String[i]=='\n'))
 13a:	99 91       	ld	r25, Y+
 13c:	9d 30       	cpi	r25, 0x0D	; 13
 13e:	29 f0       	breq	.+10     	; 0x14a <UART_ReceiveString+0x44>
 140:	9a 30       	cpi	r25, 0x0A	; 10
 142:	19 f0       	breq	.+6      	; 0x14a <UART_ReceiveString+0x44>
	{
		return E_ERROR;
	}
	gError=E_OK;
	uint8_t i=0;
	for(i=0;i<max_length;i++)
 144:	c0 17       	cp	r28, r16
 146:	d1 07       	cpc	r29, r17
 148:	a9 f7       	brne	.-22     	; 0x134 <UART_ReceiveString+0x2e>
		/*if(pu8String[6]=='\r')
		{
			DIO_Write(4,HIGH);
		}*/

	return gError;
 14a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <UART_ReceiveString_Test>:
}

enuErrorStatus_t UART_ReceiveString_Test(uint8_t* pu8string)
{
	
	return UART_ReceiveString(pu8string,MAX_LEN);
 158:	6f ef       	ldi	r22, 0xFF	; 255
 15a:	0e 94 83 00 	call	0x106	; 0x106 <UART_ReceiveString>
 15e:	08 95       	ret

00000160 <strcmp>:
 160:	fb 01       	movw	r30, r22
 162:	dc 01       	movw	r26, r24
 164:	8d 91       	ld	r24, X+
 166:	01 90       	ld	r0, Z+
 168:	80 19       	sub	r24, r0
 16a:	01 10       	cpse	r0, r1
 16c:	d9 f3       	breq	.-10     	; 0x164 <strcmp+0x4>
 16e:	99 0b       	sbc	r25, r25
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
